import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.adk.agents.BaseAgent;
import com.google.adk.agents.LlmAgent;
import com.google.adk.tools.AgentTool;
import com.google.adk.tools.BaseTool;
import com.google.adk.tools.GoogleSearchTool;
import com.google.adk.tools.mcp.McpToolset;
import com.google.adk.tools.mcp.SseServerParameters;

public class BrainAPI {

    private static final Logger logger = Logger.getLogger(BrainAPI.class.getName());

    // --- Define Constants ---
    private static final String MODEL_NAME = "gemini-2.0-flash";

    // ROOT_AGENT needed for ADK Web UI. 
    public static BaseAgent ROOT_AGENT = initAgent();

    public static BaseAgent initAgent() {
        // Set up MCP Toolbox connection to Cloud SQL 
        try {
            String mcpServerUrl = System.getenv("MCP_TOOLBOX_URL");
            if (mcpServerUrl == null || mcpServerUrl.isEmpty()) {
                mcpServerUrl = "http://127.0.0.1:5001/mcp/"; // Fallback URL
                logger.warning("‚ö†Ô∏è MCP_TOOLBOX_URL environment variable not set, using default:" + mcpServerUrl);
            }

            SseServerParameters params = SseServerParameters.builder().url(mcpServerUrl).build();
            logger.info("üï∞Ô∏è Initializing MCP toolset with params" + params);

            McpToolset.McpToolsAndToolsetResult result = McpToolset.fromServer(params, new ObjectMapper()).get();
            logger.info("‚≠ê MCP Toolset initialized: " + result.toString());
            if (result.getTools() != null && !result.getTools().isEmpty()) {
                logger.info("‚≠ê MCP Tools loaded: " + result.getTools().size());
            }
            List<BaseTool> mcpTools = result.getTools().stream()
                    .map(mcpTool -> (BaseTool) mcpTool)
                    .toList();
            logger.info("üõ†Ô∏è MCP TOOLS: " + mcpTools.toString());

            // Add GoogleSearch tool - Workaround for https://github.com/google/adk-python/issues/134 
            LlmAgent googleSearchAgent = LlmAgent.builder()
                    .model("gemini-2.0-flash")
                    .name("google_search_agent")
                    .description("Search Google Search")
                    .instruction("""
                            You're a specialist in Google Search
                            """)
                    .tools(new GoogleSearchTool()) // Your Google search tool
                    .outputKey("google_search_result")
                    .build();
            AgentTool searchTool = AgentTool.create(googleSearchAgent, false);
            List<BaseTool> allTools = new ArrayList<>(mcpTools);
            allTools.add(searchTool);
            logger.info("üåà ALL TOOLS: " + allTools.toString());
            return LlmAgent.builder()
                    .model(MODEL_NAME)
                    .name("CardMaster")
                    .description("Seu especialista na API de Cart√µes e Contas. Realiza consultas, bloqueios e outras opera√ß√µes de forma r√°pida e precisa.")
                    .instruction(
                            """
                            Voc√™ √© o CardMaster, um assistente especialista na API de cart√µes e contas da nossa empresa. Sua miss√£o √© ajudar a equipe de desenvolvimento a interagir com a API de forma eficiente, t√©cnica e um pouco descontra√≠da. Voc√™ √© a alternativa inteligente e amig√°vel ao Postman.
            
                            Seu processo √© o seguinte:
            
                            1.  **Sauda√ß√£o e An√°lise do Pedido:** Comece com uma sauda√ß√£o r√°pida e analise a solicita√ß√£o do usu√°rio. Identifique claramente a inten√ß√£o: consultar dados de um cart√£o, obter informa√ß√µes de uma conta, bloquear um cart√£o, etc. Se o pedido n√£o for claro, pe√ßa para especificarem.
            
                            2.  **Sele√ß√£o da Ferramenta Correta:** Com base no pedido, identifique a ferramenta exata na sua caixa de ferramentas da API (`block-card`, `get-card-details`, `get-card-account-info`, etc.).
            
                            3.  **Valida√ß√£o de Par√¢metros:** Antes de executar qualquer a√ß√£o, verifique se todos os par√¢metros necess√°rios foram fornecidos (como `card_id` ou `account_id`). Se algo estiver faltando, informe ao usu√°rio de forma clara e objetiva o que √© necess√°rio.
            
                            4.  **Execu√ß√£o e Retorno:** Chame a ferramenta da API.
                                * **Sucesso com Dados:** Se a chamada retornar um objeto (como os detalhes de um cart√£o ou conta), apresente o resultado SEMPRE em um bloco de c√≥digo JSON formatado de forma elegante. Use uma breve introdu√ß√£o como "Aqui est√£o os detalhes do cart√£o solicitado:" ou "Miss√£o cumprida! Segue o JSON da conta:".
                                * **Sucesso sem Dados:** Se a opera√ß√£o for bem-sucedida mas n√£o retornar dados (como um bloqueio de cart√£o), confirme a a√ß√£o de forma positiva. Ex: "`O cart√£o com final 4321 foi bloqueado com sucesso! Mantenha a calma e siga em frente.`"
                                * **Erro na API:** Se a API retornar um erro, apresente o status do erro (ex: `404 Not Found`) e a mensagem de erro da API em um formato claro, para que a equipe possa depurar rapidamente. Ex: "`Alerta vermelho! A API retornou um erro 404. Detalhes: { 'error': 'Cart√£o n√£o encontrado' }.`"
            
                            5.  **Pr√≥ximo Passo:** Sempre termine perguntando qual ser√° a pr√≥xima miss√£o, como por exemplo: "O que mais posso fazer por voc√™?" ou "Pronto para o pr√≥ximo desafio?".
                            """)
                    .tools(allTools)
                    .outputKey("bug_assistant_result")
                    .build();
        } catch (Exception e) {
            logger.info("Error initializing MCP toolset and starting agent " + e.getMessage());
            return null;
        }
    }
}
